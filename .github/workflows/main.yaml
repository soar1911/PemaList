name: Deploy to Production

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Debug Secrets
      run: |
        if [ -n "${{ secrets.SERVER_HOST }}" ]; then
          echo "SERVER_HOST is set"
        else
          echo "SERVER_HOST is not set"
          exit 1
        fi

    - name: Set up SSH
      run: |
        # 創建 SSH 目錄
        mkdir -p ~/.ssh
        
        # 檢查並設置 SSH 私鑰
        if [ -n "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        else
          echo "SSH_PRIVATE_KEY is not set"
          exit 1
        fi
        
        # 設置 SSH 配置
        echo "Host ${{ secrets.SERVER_HOST }}
          StrictHostKeyChecking no
          UserKnownHostsFile=/dev/null
          " > ~/.ssh/config
          
        # 添加服務器到已知主機
        if [ -n "${{ secrets.SERVER_HOST }}" ]; then
          ssh-keyscan -H "${{ secrets.SERVER_HOST }}" >> ~/.ssh/known_hosts
        else
          echo "SERVER_HOST is empty"
          exit 1
        fi

    - name: Deploy to server
      env:
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
        DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
      run: |
        # 顯示部署信息
        echo "Deploying to $SERVER_USER@$SERVER_HOST:$DEPLOY_PATH"
        
        # 測試 SSH 連接
        ssh -v ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "echo 'SSH connection test'"
        
        # 確保目標目錄存在
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "mkdir -p ${{ secrets.DEPLOY_PATH }}"
        
        # 複製文件
        scp -r ./* ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ secrets.DEPLOY_PATH }}/
        
        # 執行部署
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "cd ${{ secrets.DEPLOY_PATH }} && \
          mkdir -p output_files && \
          chmod -R 777 output_files && \
          docker-compose down && \
          docker-compose build --no-cache && \
          docker-compose up -d && \
          docker image prune -f"
